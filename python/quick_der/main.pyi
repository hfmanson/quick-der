# Stubs for quick_der.main (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from asn1ate.sema import *
from typing import Any, Optional

class dprint:
    enable: bool = ...
    def __init__(self, s, *args) -> None: ...

def tosym(name): ...

api_prefix: str
dertag2atomsubclass: Any

class QuickDERgeneric:
    outfile: Any = ...
    comma1: Any = ...
    comma0: Any = ...
    def __init__(self, outfn, outext) -> None: ...
    def write(self, txt): ...
    def writeln(self, txt: str = ...): ...
    def newcomma(self, comma, firstcomma: str = ...): ...
    def comma(self): ...
    def getcomma(self): ...
    def setcomma(self, comma1, comma0): ...
    def close(self): ...

class QuickDER2c(QuickDERgeneric):
    to_be_defined: Any = ...
    to_be_overlaid: Any = ...
    cursor_offset: Any = ...
    nested_typerefs: Any = ...
    nested_typecuts: Any = ...
    semamod: Any = ...
    refmods: Any = ...
    overlay_funmap: Any = ...
    pack_funmap: Any = ...
    psub_funmap: Any = ...
    issued_typedefs: Any = ...
    def __init__(self, semamod, outfn, refmods) -> None: ...
    def generate_head(self): ...
    def generate_tail(self): ...
    def generate_overlay(self): ...
    def generate_pack(self): ...
    def generate_psub(self): ...
    def generate_psub_sub(self, node, subquads, tp, fld): ...
    def generate_overlay_node(self, node, tp, fld): ...
    def generate_pack_node(self, node, **kwargs): ...
    def generate_psub_node(self, node, tp, fld, prim): ...
    def overlayValueAssignment(self, node, tp, fld): ...
    def packValueAssignment(self, node): ...
    def psubValueAssignment(self, node, tp, fld, prim): ...
    def overlayTypeAssignment(self, node, tp, fld): ...
    def packTypeAssignment(self, node, implicit: bool = ...): ...
    def psubTypeAssignment(self, node, tp, fld, prim): ...
    def overlayDefinedType(self, node, tp, fld): ...
    def packDefinedType(self, node, implicit: bool = ..., outer_tag: Optional[Any] = ...): ...
    unit: Any = ...
    def psubDefinedType(self, node, tp, fld, prim): ...
    def overlaySimpleType(self, node, tp, fld): ...
    def packSimpleType(self, node, implicit: bool = ..., outer_tag: Optional[Any] = ...): ...
    def psubSimpleType(self, node, tp, fld, prim): ...
    def overlayTaggedType(self, node, tp, fld): ...
    def packTaggedType(self, node, implicit: bool = ..., outer_tag: Optional[Any] = ...): ...
    def packTaggedType_TODO(self, node, implicit: bool = ...): ...
    def psubTaggedType(self, node, tp, fld, prim): ...
    def overlayConstructedType(self, node, tp, fld, naked: bool = ...): ...
    def psubConstructedType(self, node, tp, fld, prim): ...
    def packSequenceType(self, node, implicit: bool = ..., outer_tag: str = ...): ...
    def packSetType(self, node, implicit: bool = ..., outer_tag: str = ...): ...
    def packChoiceType(self, node, implicit: bool = ..., outer_tag: Optional[Any] = ...): ...
    def overlayRepeatingStructureType(self, node, tp, fld): ...
    def psubRepeatingStructureType(self, node, tp, fld, prim): ...
    def packSequenceOfType(self, node, implicit: bool = ..., outer_tag: str = ...): ...
    def packSetOfType(self, node, implicit: bool = ..., outer_tag: str = ...): ...

class QuickDER2py(QuickDERgeneric):
    cursor_offset: Any = ...
    nested_typerefs: Any = ...
    nested_typecuts: Any = ...
    semamod: Any = ...
    refmods: Any = ...
    funmap_pytype: Any = ...
    def __init__(self, semamod, outfn, refmods) -> None: ...
    def comment(self, text): ...
    def generate_head(self): ...
    def generate_tail(self): ...
    def generate_values(self): ...
    def pygenValueAssignment(self, node): ...
    def pyvalInteger(self, valnode): ...
    def pyvalOID(self, valnode): ...
    def generate_classes(self): ...
    def pygenTypeAssignment(self, node): ...
    def generate_pytype(self, node, **subarg): ...
    unit: Any = ...
    def pytypeDefinedType(self, node, **subarg): ...
    def pytypeSimple(self, node, implicit_tag: Optional[Any] = ...): ...
    def pytypeTagged(self, node, implicit_tag: Optional[Any] = ...): ...
    def pytypeNamedType(self, node, **subarg): ...
    def pyhelpConstructedType(self, node): ...
    def pytypeChoice(self, node, implicit_tag: Optional[Any] = ...): ...
    def pytypeSequence(self, node, implicit_tag: str = ...): ...
    def pytypeSet(self, node, implicit_tag: str = ...): ...
    def pyhelpRepeatedType(self, node, dertag, recptag): ...
    def pytypeSequenceOf(self, node, implicit_tag: str = ...): ...
    def pytypeSetOf(self, node, implicit_tag: str = ...): ...

class QuickDER2testdata(QuickDERgeneric):
    semamod: Any = ...
    refmods: Any = ...
    type2tdgen: Any = ...
    funmap_tdgen: Any = ...
    def __init__(self, semamod, outfn, refmods) -> None: ...
    def fetch_one(self, typename, casenr): ...
    def fetch_multi(self, typename, testcases): ...
    def all_typenames(self): ...
    def generate_testdata(self): ...
    def process_TypeAssignment(self, node): ...
    def generate_tdgen(self, node, **subarg): ...
    def tdgenDefinedType(self, node, **subarg): ...
    def der_prefixhead(self, tag, body): ...
    simple_cases: Any = ...
    def tdgenSimple(self, node): ...
    def tdgenNamedType(self, node, **subarg): ...
    nodeclass2basaltag: Any = ...
    def tdgenTagged(self, node, implicit_tag: Optional[Any] = ...): ...
    def tdgenChoice(self, node, implicit_tag: Optional[Any] = ...): ...
    def tdgenConstructed(self, node, implicit_tag: Optional[Any] = ...): ...
    def tdgenRepeated(self, node, **subarg): ...

def main(script_name, script_args): ...
